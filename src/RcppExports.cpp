// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distSO
Rcpp::NumericVector distSO(arma::mat& X, arma::mat& Y);
RcppExport SEXP _manifold_distSO(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(distSO(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// logSO
arma::mat logSO(const arma::mat& p, const arma::mat& X);
RcppExport SEXP _manifold_logSO(SEXP pSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(logSO(p, X));
    return rcpp_result_gen;
END_RCPP
}
// ExpM
arma::mat ExpM(const arma::mat& X);
RcppExport SEXP _manifold_ExpM(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpM(X));
    return rcpp_result_gen;
END_RCPP
}
// LogM
arma::mat LogM(const arma::mat& X);
RcppExport SEXP _manifold_LogM(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(LogM(X));
    return rcpp_result_gen;
END_RCPP
}
// LogMSPD
arma::mat LogMSPD(const arma::mat& X);
RcppExport SEXP _manifold_LogMSPD(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(LogMSPD(X));
    return rcpp_result_gen;
END_RCPP
}
// distAffInv11
double distAffInv11(const arma::mat& X, const arma::mat& Y);
RcppExport SEXP _manifold_distAffInv11(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(distAffInv11(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// distAffInv11_2
double distAffInv11_2(const arma::mat& X, const arma::mat& Y);
RcppExport SEXP _manifold_distAffInv11_2(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(distAffInv11_2(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// distAffInv1m
Rcpp::NumericVector distAffInv1m(const arma::mat& X, const arma::mat& Y);
RcppExport SEXP _manifold_distAffInv1m(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(distAffInv1m(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// distAffInv
Rcpp::NumericVector distAffInv(arma::mat& X, arma::mat& Y);
RcppExport SEXP _manifold_distAffInv(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(distAffInv(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// logAffInv
arma::mat logAffInv(const arma::mat& p, const arma::mat& X);
RcppExport SEXP _manifold_logAffInv(SEXP pSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(logAffInv(p, X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_manifold_distSO", (DL_FUNC) &_manifold_distSO, 2},
    {"_manifold_logSO", (DL_FUNC) &_manifold_logSO, 2},
    {"_manifold_ExpM", (DL_FUNC) &_manifold_ExpM, 1},
    {"_manifold_LogM", (DL_FUNC) &_manifold_LogM, 1},
    {"_manifold_LogMSPD", (DL_FUNC) &_manifold_LogMSPD, 1},
    {"_manifold_distAffInv11", (DL_FUNC) &_manifold_distAffInv11, 2},
    {"_manifold_distAffInv11_2", (DL_FUNC) &_manifold_distAffInv11_2, 2},
    {"_manifold_distAffInv1m", (DL_FUNC) &_manifold_distAffInv1m, 2},
    {"_manifold_distAffInv", (DL_FUNC) &_manifold_distAffInv, 2},
    {"_manifold_logAffInv", (DL_FUNC) &_manifold_logAffInv, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_manifold(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
